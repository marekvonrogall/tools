@page "/"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS

<div class="login-page">
    <div class="form-container">
        <div class="form-box">
            @if (ShowCatOverlay)
            {
                <img class="cat-overlay" src="images/cat.png" alt="Cat"/>
            }
            <div class="header">
                <img class="login-image" src="images/vrmo-logo.png" alt="Logo"/>
            </div>

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator/>

                <div class="form-group">
                    <label for="username">Benutzername:</label>
                    <InputText id="username" @bind-Value="loginModel.Username" class="form-control"/>
                </div>
                <div class="form-group">
                    <label for="password">Passwort:</label>
                    <InputText id="password" @bind-Value="loginModel.Password" Type="password" class="form-control"/>
                </div>
                <div class="submit-group">
                    <button type="submit">Anmelden</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private bool ShowCatOverlay;

    protected override void OnInitialized()
    {
        var random = new Random();
        ShowCatOverlay = random.Next(1, 51) == 1;
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (result?.Token != null)
                {
                    await JS.InvokeVoidAsync("localStorage.setItem", "vrmo-token", result.Token);
                    await JS.InvokeVoidAsync("alert", "Login erfolgreich!");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Login fehlgeschlagen!");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Login fehlgeschlagen!");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Login error: {ex.Message}");
            await JS.InvokeVoidAsync("alert", "Login fehlgeschlagen!");
        }
    }

    private class LoginResult
    {
        public string? Token { get; set; }
    }
}
